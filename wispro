#!/bin/bash
# Wispro Bandwidth Management Unit

VERSION=latest
VOLUMES_PATH=/usr/src/app

# Docker env vars for Wispro app
ENV_VARS="-e PRODUCTION_MAIL_USER=admin@wispro.co"
ENV_VARS="${ENV_VARS} -e PRODUCTION_MAIL_PASSWORD=12345678"
ENV_VARS="${ENV_VARS} -e PRODUCTION_RABBIT_USER=wisproMQ"
ENV_VARS="${ENV_VARS} -e PRODUCTION_RABBIT_PASSWORD=wisproMQ"
ENV_VARS="${ENV_VARS} -e PRODUCTION_RABBIT_HOST=192.168.20.243"
ENV_VARS="${ENV_VARS} -e PRODUCTION_RABBIT_VIRTUAL_HOST=sync.devel"
ENV_VARS="${ENV_VARS} -e PRODUCTION_SENTRY_PROTOCOL=http"
ENV_VARS="${ENV_VARS} -e PRODUCTION_SENTRY_PUBLIC_KEY=ef9c130384880674ddefe3d6a4042a0f"
ENV_VARS="${ENV_VARS} -e PRODUCTION_SENTRY_SECRET_KEY=efe3d6a4042a0f45b2af510f5e27ceac"
ENV_VARS="${ENV_VARS} -e PRODUCTION_SENTRY_HOST=192.168.20.243"
ENV_VARS="${ENV_VARS} -e PRODUCTION_SENTRY_PORT=9000"
ENV_VARS="${ENV_VARS} -e PRODUCTION_SENTRY_PROJECT=1"
ENV_VARS="${ENV_VARS} -e PRODUCTION_SECRET_KEY_BASE=35105d6fc2396879b93f37144cbff0908922b8f2b9469828decb1ca87fd9b6023962c5991308b46920a4b8ed4beed9d2171452b211f08050f6922f51f104f80e"
ENV_VARS="${ENV_VARS} -e PRODUCTION_DEVISE_SECRET_KEY_BASE=399dc04d0a869bc6b2338c7724290601109574ab2d244c409b930095cd32b090e254250c1771c7344ba1cdba2f4b119f0dad2be57c4561f03fc32c511ed2048a"
ENV_VARS="${ENV_VARS} -e RSYNC_FULL_PATH=luchano@192.168.20.243:/home/luchano/src/wispro_bmu"

# Docker host dirs as volumes
VOLUMES="-v ${VOLUMES_PATH}/tmp:/usr/src/app/tmp"
VOLUMES="${VOLUMES} -v ${VOLUMES_PATH}/log:/usr/src/app/log"
VOLUMES="${VOLUMES} -v ${VOLUMES_PATH}/data:/usr/src/app/data"
VOLUMES="${VOLUMES} -v ${VOLUMES_PATH}/etc:/usr/src/app/etc"
VOLUMES="${VOLUMES} -v ${VOLUMES_PATH}/scripts:/usr/src/app/scripts"


is_running(){
  local name=$1
  if docker top $name &>/dev/null; then
    return 0
  else
    return 1
  fi
}
container_exists(){
  local name=$1
  if [[ $(docker ps -a -f "name=$name" --format '{{.Names}}') == $name ]]; then
    return 0
  else
    return 1
  fi
}
stop(){
  local name=wispro-${1}
  #if is_running $name; then
    docker stop $name
  #fi
}
start(){
  local name=$1 extra_args="" rsync_with_developer_file=/usr/src/app/tmp/.rsync_with_developer
  if [[ "${BASH_ARGV[0]}" == "sync" ]]; then
    touch $rsync_with_developer_file
  else
    [[ -r $rsync_with_developer_file ]] && rm -f $rsync_with_developer_file
  fi
  if [[ $name == "server" ]];then
    extra_args="-p 80:3000"
  fi
  full_name=wispro-${name}
  if ! is_running $full_name; then
    if container_exists $full_name; then
      opts="start $full_name"
    else
      opts="run --log-opt max-size=1m --log-opt max-file=3 --restart=unless-stopped -d ${extra_args} ${ENV_VARS} ${VOLUMES} --name $full_name -h $full_name wispro/bmu:${VERSION} /usr/src/app/bin/docker-cmd-$name.sh"
    fi
    docker $opts
    return $?
    #echo $(docker inspect -f '{{ .State.Pid }}' $name) > $WISPRO_SERVER_PIDFILE
  fi
}
case $1 in
check)
  ;;
start)
  start server
  start daemon
  ;;
stop)
  stop server
  stop daemon
  ;;
restart)
  stop server
  stop daemon
  start server
  start daemon
  ;;
upgrade)
  #TODO trap
  new_version=$2
  if docker pull wispro/bmu:${new_version}; then
    stop server
    stop daemon
    cp ${app_path}/wispro_bmu_production.sqlite3 ${app_path}/wispro_bmu_production.sqlite3.bak
    if container_exists wispro-server; then
      if container_exists wispro-server-bak; then
        docker container rm wispro-server-bak
      fi
      docker container rename wispro-server wispro-server-bak
    fi
    if container_exists wispro-daemon; then
      if container_exists wispro-daemon-bak; then
        docker container rm wispro-daemon-bak
      fi
      docker container rename wispro-daemon wispro-daemon-bak
    fi
    if start server && start daemon; then
      exit 0
    else
      docker container rename wispro-server-bak wispro-server
      docker container rename wispro-daemon-bak wispro-daemon
      start server
      start daemon
      echo "Upgrade to version ${new_version} failed."
      exit 1
    fi
  else
    echo "Upgrade to version ${new_version} failed."
    exit 1
  fi
  ;;
console)
  docker exec -it wispro-server /bin/bash -c "rails c"
  ;;
log)
  tail -n500 -F /usr/src/app/log/application.log
  ;;
apply)
  docker exec -it wispro-server /bin/bash -c "rails runner 'ApplyChanges.new.boot true'"
  ;;
bash-server)
  docker exec -it wispro-server /bin/bash
  ;;
bash-daemon)
  docker exec -it wispro-daemon /bin/bash
  ;;
reset)
  echo "Deleting all containers and Wispro database, are you sure?"
  echo "(Pres Ctrl-c to cancel/Enter to continue)"
  read dummy
  stop server
  stop daemon
  docker container prune -f
  rm -f /usr/src/app/data/wispro_bmu_production.sqlite3
  ;;
top)
  echo
  echo "Wispro Server"
  docker top wispro-server
  echo
  echo "Wispro Daemon"
  docker top wispro-daemon
  ;;
esac
