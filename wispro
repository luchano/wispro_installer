#!/bin/bash

# Wispro Bandwidth Management Unit
WISPRO_URL="https://www.cloud.wispro.co"
FOR_BMU_VERSION="0.7.0"
BMU_NGINX_VERSION="1.9"
BMU_DNSMASQ_VERSION="1.3"
BMU_DHCP_VERSION="1.0"
BMU_PPTPD_VERSION="1.0"
FREERADIUS_VERSION="1.2"
BMU_POSTGRESQL_VERSION="1.0"
REDIS_VERSION="1.1"
BMU_TFTP_VERSION="0.0.1"
BMU_XINETD_VERSION="0.0.1"
VOLUMES_PATH=/usr/src/app
DAEMONS_TO_CHECK_AFTER_UPGRADE="bmud bmud_daemon_check_link bmud_daemon_cloud_consumer bmud_daemon_cloud_sync bmud_daemon_contract_notifications"
WISPRO_SCRIPT_FILE=${BASH_SOURCE}
LOG_PATH=/usr/src/app/log

# We store lines and columns to tell docker later about console size
LINES=$(stty size| cut -d" " -f1)
COLUMNS=$(stty size| cut -d" " -f2)

# Docker host dirs as volumes
VOLUMES="-v ${VOLUMES_PATH}/tmp:/usr/src/app/tmp"
VOLUMES="${VOLUMES} -v ${VOLUMES_PATH}/log:/usr/src/app/log"
VOLUMES="${VOLUMES} -v ${VOLUMES_PATH}/public/assets:/usr/src/app/public/assets_mounted"  # public assets
VOLUMES="${VOLUMES} -v ${VOLUMES_PATH}/data:/usr/src/app/data"
VOLUMES="${VOLUMES} -v ${VOLUMES_PATH}/etc:/usr/src/app/etc"
VOLUMES="${VOLUMES} -v ${VOLUMES_PATH}/scripts:/usr/src/app/scripts"
VOLUMES="${VOLUMES} -v ${VOLUMES_PATH}/sockets:/usr/src/app/tmp/sockets"
VOLUMES="${VOLUMES} -v /etc/dhcp:/etc/dhcp"
VOLUMES="${VOLUMES} -v /etc/ppp:/etc/ppp"


### ================== NGINX =====================
NGINX=nginx
NGINX_VOLUMES="-v ${LOG_PATH}/nginx:/var/log/nginx" # Logs
NGINX_VOLUMES="$NGINX_VOLUMES -v ${VOLUMES_PATH}/sockets:/app/sockets"
NGINX_VOLUMES="$NGINX_VOLUMES -v ${VOLUMES_PATH}/public/assets:/app/public/assets"  # public assets

sse_support=$(cat /proc/cpuinfo | grep -i sse4_2)
if [[ ! $sse_support ]]; then
  BMU_NGINX_VERSION="$BMU_NGINX_VERSION-old"
fi

run_nginx() {
  if container_exists $NGINX; then
    docker start $NGINX
  else
    local extra_params="--log-opt max-size=1m --log-opt max-file=3 --restart=unless-stopped"
    extra_params="$extra_params -d --network host --name $NGINX -h $NGINX $NGINX_VOLUMES"

    docker run $extra_params wispro/bmu_nginx:${BMU_NGINX_VERSION}
  fi
}

stop_nginx() {
  docker stop $NGINX
}

start_nginx() {
  if is_running $NGINX; then
    stop_nginx
  fi

  run_nginx
}

### ================== FREERADIUS =====================
FREERADIUS=freeradius
FREERADIUS_VOLUMES="-v /usr/src/app/data/clients.conf:/etc/raddb/clients.conf"
FREERADIUS_VOLUMES="$FREERADIUS_VOLUMES -v /usr/src/app/data/users:/etc/raddb/users"  # public assets

start_freeradius() {
  if ! is_running $FREERADIUS; then
    if container_exists $FREERADIUS; then
      docker start $FREERADIUS
    else
      echo "Initializing new docker container with version wispro/bmu_freeradius:${FREERADIUS_VERSION}"
      local extra_params="--log-opt max-size=1m --log-opt max-file=3 --restart=unless-stopped"
      extra_params="$extra_params -d --network host --name $FREERADIUS -h $FREERADIUS $FREERADIUS_VOLUMES wispro/bmu_freeradius:${FREERADIUS_VERSION}"
      docker run $extra_params
    fi

    return $?
    #echo $(docker inspect -f '{{ .State.Pid }}' $name) > $WISPRO_SERVER_PIDFILE
  fi
}

stop_freeradius() {
  docker stop $FREERADIUS
}

### =================== DHCP =======================
DHCP=dhcp
DHCP_VOLUMES="-v /usr/src/app/data/dhcp/:/etc/dhcp/"

start_dhcp() {
  if ! is_running $DHCP; then
    if container_exists $DHCP; then
      docker start $DHCP
    else
      echo "Initializing new docker container with version wispro/bmu_dhcp"
      local extra_params="--log-opt max-size=10m --log-opt max-file=5 --restart=unless-stopped"
      extra_params="$extra_params -d --network host --name $DHCP -h $DHCP --cap-add=NET_ADMIN $DHCP_VOLUMES"
      docker run $extra_params wispro/bmu_dhcp:${BMU_DHCP_VERSION}
    fi
    return $?
    #echo $(docker inspect -f '{{ .State.Pid }}' $name) > $WISPRO_SERVER_PIDFILE
  fi
}

stop_dhcp() {
    docker stop $DHCP
}

### ================== DNSMASQ =====================
DNSMASQ=dnsmasq
DNSMASQ_VOLUMES="-v /etc/resolv.conf:/etc/resolv.conf"
DNSMASQ_VOLUMES="$DNSMASQ_VOLUMES -v /usr/src/app/data/dnsmasq.d/:/etc/dnsmasq.d/"
#DNSMASQ_VOLUMES="$DNSMASQ_VOLUMES -v /usr/src/app/data/dnsmasq.conf:/etc/dnsmasq.conf"
#DNSMASQ_VOLUMES="$DNSMASQ_VOLUMES -v /usr/src/app/data/dnsmasq.wispro/:/etc/dnsmasq.wispro/"

start_dnsmasq() {
  if ! is_running $DNSMASQ; then
    if container_exists $DNSMASQ; then
      docker start $DNSMASQ
    else
      echo "Stop local dnsmasq"
      if [[ -x /usr/sbin/dnsmasq ]]; then
        service dnsmasq stop
        apk del dnsmasq
      fi
      echo "Initializing new docker container with version wispro/dnsmasq"
      local extra_params="--log-opt max-size=1m --log-opt max-file=3 --restart=unless-stopped"
      extra_params="$extra_params -d --network host --name $DNSMASQ -h $DNSMASQ --cap-add=NET_ADMIN $DNSMASQ_VOLUMES"
      docker run $extra_params wispro/bmu_dnsmasq:${BMU_DNSMASQ_VERSION}
    fi
    return $?
    #echo $(docker inspect -f '{{ .State.Pid }}' $name) > $WISPRO_SERVER_PIDFILE
  fi
}

stop_dnsmasq() {
  docker stop $DNSMASQ
}

### ================== PPTPD ==========================
PPTPD=pptpd
PPTPD_VOLUMES="-v $VOLUMES_PATH/data/pptpd/chap-secrets:/etc/ppp/chap-secrets"
PPTPD_VOLUMES="$PPTPD_VOLUMES -v $VOLUMES_PATH/data/pptpd/pptpd.conf:/etc/pptpd.conf"
PPTPD_VOLUMES="$PPTPD_VOLUMES -v $VOLUMES_PATH/data/pptpd/pptpd-options:/etc/ppp/pptpd-options"

start_pptpd() {
  mkdir -p $VOLUMES_PATH/data/pptpd
  touch $VOLUMES_PATH/data/pptpd/chap-secrets \
        $VOLUMES_PATH/data/pptpd/pptpd.conf \
        $VOLUMES_PATH/data/pptpd/pptpd-options

  if ! is_running $PPTPD; then
    if container_exists $PPTPD; then
      docker start $PPTPD
    else
      echo "Initializing new docker container with version wispro/bmu_pptpd"
      local extra_params="--log-opt max-size=10m --log-opt max-file=5 --restart=unless-stopped"
      extra_params="$extra_params -d --privileged --network host --name $PPTPD -h $PPTPD --cap-add=NET_ADMIN $PPTPD_VOLUMES"
      docker run $extra_params wispro/bmu_pptpd:${BMU_PPTPD_VERSION}
    fi
    return $?
  fi
}

stop_pptpd() {
  docker stop $PPTPD
}

### ==================== TFTP ======================
TFTP=tftp
TFTP_VOLUMES="-v /usr/src/app/data/tftpboot:/var/tftpboot"

start_tftp() {
  if ! is_running $TFTP; then
    if container_exists $TFTP; then
      docker start $TFTP
    else
      echo "Initializing new docker container with version wispro/bmu_tftp"
      local extra_params="--log-opt max-size=10m --log-opt max-file=5 --restart=unless-stopped"
      extra_params="$extra_params -d --network host --name $TFTP -h $TFTP --cap-add=NET_ADMIN $TFTP_VOLUMES"
      docker run $extra_params wispro/bmu_tftp:${BMU_TFTP_VERSION}
    fi
    return $?
  fi
}

stop_tftp() {
  docker stop $TFTP
}

### ==================== XINETD ======================
XINETD=xinetd

start_xinetd() {
  if ! is_running $XINETD; then
    if container_exists $XINETD; then
      docker start $XINETD
    else
      echo "Initializing new docker container with version wispro/bmu_xinetd"
      local extra_params="--log-opt max-size=10m --log-opt max-file=5 --restart=unless-stopped"
      extra_params="$extra_params -d --network host --name $XINETD -h $XINETD --cap-add=NET_ADMIN"
      docker run $extra_params wispro/bmu_xinetd:${BMU_XINETD_VERSION}
    fi
    return $?
  fi
}

stop_xinetd() {
  docker stop $XINETD
}

### ================== POSTGRESQL =====================
POSTGRESQL=bmu_postgresql
POSTGRESQL_VOLUMES="-v ${LOG_PATH}/postgresql:/var/log/postgresql" # Logs
POSTGRESQL_VOLUMES="$POSTGRESQL_VOLUMES -v ${VOLUMES_PATH}/data/postgresql:/var/lib/postgresql/data:rw"

run_postgresql() {
  if container_exists $POSTGRESQL; then
    docker start $POSTGRESQL
  else
    local extra_params="--log-opt max-size=1m --log-opt max-file=3 --restart=unless-stopped"
    extra_params="$extra_params -d --network host --name $POSTGRESQL -h $POSTGRESQL $POSTGRESQL_VOLUMES"

    docker run $extra_params wispro/bmu_postgresql:${BMU_POSTGRESQL_VERSION}
  fi
}

stop_postgresql() {
  docker stop $POSTGRESQL
}

start_postgresql() {
  if is_running $POSTGRESQL; then
    echo 'running...'
  else
    echo "waking up postgres"
    run_postgresql
  fi
}

### ================== REDIS =====================
REDIS=redis
REDIS_VOLUMES="-v ${LOG_PATH}/redis:/var/log/redis" # Logs
REDIS_VOLUMES="$REDIS_VOLUMES -v ${LOG_PATH}/redis:/var/log/redis" # Logs
REDIS_VOLUMES="$REDIS_VOLUMES -v ${VOLUMES_PATH}/redis:/etc/redis/data:rw"

run_redis() {
  if container_exists $REDIS; then
    docker start $REDIS
  else
    local extra_params="--log-opt max-size=1m --log-opt max-file=3 --restart=unless-stopped"
    extra_params="$extra_params -d --network host --name $REDIS -h $REDIS $REDIS_VOLUMES"

    docker run $extra_params wispro/bmu_redis:${REDIS_VERSION}
  fi
}

stop_redis() {
  docker stop $REDIS
}

start_redis() {
  if is_running $REDIS; then
    echo 'running...'
  else
    echo "waking up redis"
    run_redis
  fi
}


### ================== COMMON FUNCTIONS =====================
is_running(){
  if docker top $1 &>/dev/null; then
    return 0
  else
    return 1
  fi
}
container_exists(){
  local container_name=$1
  if [[ $(docker ps -a -f "name=$container_name\$" --format '{{.Names}}') == $container_name ]]; then
    return 0
  else
    return 1
  fi
}
daemon_is_running (){
  local daemon=$1
  for daemon_running in $daemons_running; do
    [[ $daemon_to_check == $daemon_running ]] && return 0
  done
  return 1
}
daemons_are_running(){
  local found=0
  daemons_running=$(docker top wispro-daemon | grep ruby | awk '{print $5}')
  for daemon_to_check in $DAEMONS_TO_CHECK_AFTER_UPGRADE; do
    daemon_is_running daemon_to_check || return 1
  done
  return 0
}

stop(){
  local stop_name=wispro-${1}
  #if is_running $name; then
    docker stop $stop_name
    if [[ "$stop_name" == "wispro-server" ]]; then
      stop_nginx
    fi
  #fi
}
start(){
  local start_name=$1 extra_args="" rsync_with_developer_file=/usr/src/app/tmp/.rsync_with_developer
  if [[ "${BASH_ARGV[0]}" == "sync" ]]; then
    touch $rsync_with_developer_file
  else
    [[ -r $rsync_with_developer_file ]] && rm -f $rsync_with_developer_file
  fi

  full_name=wispro-${start_name}

  start_postgresql
  start_redis

  if ! is_running $full_name; then
    if container_exists $full_name; then
      opts="start $full_name"
    else
      if [[ -z "${VERSION}" ]]; then
        echo "VERSION= is unset, please run: "
        echo "# VERSION=version_number wispro start"
        exit 1
      else
        echo "Initializing new docker container with version wispro/bmu:${VERSION}"
        opts="run --log-opt max-size=1m --log-opt max-file=3 --restart=unless-stopped --privileged --network host"
        opts="$opts -d ${extra_args} ${VOLUMES} --name $full_name -h $full_name wispro/bmu:${VERSION} /usr/src/app/bin/docker-cmd-$start_name.sh"
      fi
    fi
    docker $opts

    if [[ $full_name == "wispro-server" ]]; then
      start_nginx
    fi

    start_dnsmasq

    return $?
    #echo $(docker inspect -f '{{ .State.Pid }}' $name) > $WISPRO_SERVER_PIDFILE
  fi
}


### ================== COMMAND ARGUMENTS =====================
case $1 in
check)
  ;;
start)
  if [[ -n "${2}" ]];then
    case $2 in
    $FREERADIUS)
      start_freeradius;;
    $DNSMASQ)
      start_dnsmasq;;
    $DHCP)
      start_dhcp;;
    $PPTPD)
      start_pptpd;;
    $TFTP)
      start_tftp;;
    $XINETD)
      start_xinetd;;
    $POSTGRESQL)
      start_postgresql;;
    *)
      start ${2};;
    esac
    # if [[ $2 == $FREERADIUS ]];then
    #   start_freeradius
    # else
    #   start ${2}
    # fi
  else
    start server
    start daemon
  fi
  ;;
stop)
  if [[ -n "${2}" ]];then
    case $2 in
    $FREERADIUS)
      stop_freeradius;;
    $DNSMASQ)
      stop_dnsmasq;;
    $DHCP)
      stop_dhcp;;
    $PPTPD)
      stop_pptpd;;
    $TFTP)
      stop_tftp;;
    $XINETD)
      stop_xinetd;;
    $POSTGRESQL)
      stop_postgresql;;
    *)
      stop ${2};;
    esac
    # if [[ $2 == $FREERADIUS ]];then
    #   stop_freeradius
    # else
    #   stop ${2}
    # fi
  else
    stop server
    stop daemon
  fi
  ;;
restart)
  if [[ -n "${2}" ]];then
    case $2 in
      $FREERADIUS)
        stop_freeradius
        start_freeradius;;
      $DNSMASQ)
        stop_dnsmasq
        start_dnsmasq;;
      $DHCP)
        stop_dhcp
        start_dhcp;;
      $PPTPD)
        stop_pptpd
        start_pptpd;;
      $TFTP)
        start_tftp
        stop_tftp;;
      $XINETD)
        start_xinetd
        stop_xinetd;;
      $POSTGRESQL)
        stop_postgresql
        start_postgresql;;
      $REDIS)
        stop_redis
        start_redis;;
      *)
        stop ${2}
        start ${2}
    esac
  else
    stop server
    stop daemon
    start server
    start daemon
  fi
  ;;
upgrade)
  set -x
  #TODO trap
  do_exit(){
    echo "Upgrade to version ${new_version} failed."
    exit 1
  }
  restore_old_version(){
    restore_container(){
      restore_container=$1
      if container_exists $restore_container; then
        docker container rm $restore_container
      fi
      docker container rename ${restore_container}-bak $restore_container
    }
    VERSION=$old_version
    stop server
    stop daemon

    restore_container wispro-server
    restore_container wispro-daemon

    start server
    start daemon
  }
  apply_patches(){
    action=$1
    restore=$2
    patch_file=$(mktemp)
    status_code=$(curl -w "%{http_code}" -o $patch_file "${WISPRO_URL}/bmu_versions/${action}?api_token=${api_token}&from=${old_version}&to=${new_version}")
    if [[ "$status_code" == "200" ]]; then
      if [[ "$(/bin/bash $patch_file TEST)" == "OK" ]];then
        cat $patch_file
        if /bin/bash $patch_file; then
          return 0
        fi
      fi
    fi
    if [[ "$action" == "patches_post" ]]; then
      restore_old_version
    fi
    do_exit
  }
  download_new_wispro(){
    tmp_script=$(mktemp)
    http_code=$(curl -w '%{http_code}' -L "https://github.com/sequre/wispro_installer/raw/${new_version}/wispro" -o $tmp_script)
    if [[ $? -eq 0 && "${http_code}" = "200" && "$(/bin/bash ${tmp_script} version)" = "${new_version}" ]] && \
      #cp ${WISPRO_SCRIPT_FILE} ${WISPRO_SCRIPT_FILE}.bak && \
      chmod 755 ${tmp_script} && \
      cp $tmp_script ${WISPRO_SCRIPT_FILE}; then
      [ -d ${LOG_PATH} ] || mkdir -p $LOG_PATH
      # Empezamos de nuevo con el upgrade, pero ya tenemos la nueva versión de wispro (el script)
      # que acaba de pisar este mismo script que estamos ejecutando, por eso hacemos exec
      # para asegurarnos de salir del current script y ejectuar el que acabamos de bajar
      exec ${WISPRO_SCRIPT_FILE} upgrade ${new_version}  &>${LOG_PATH}/wispro_upgrade_to_${new_version}
      echo "If you read this message then something had gone seriously WRONG"
    else
      echo "Unable to download and test wispro script with tag: ${new_version}"
    fi
    do_exit
  }
  backup_container(){
    backup_container=$1
    if container_exists $backup_container; then
      if container_exists ${backup_container}-bak; then
        docker container rm ${backup_container}-bak
      fi
      docker container rename ${backup_container} ${backup_container}-bak
    fi
  }
  upgrade_containers(){
    old_bmu_dnsmasq_version=$(docker inspect --format='{{.Config.Image}}' dnsmasq | awk -F: '{print $2}')
    if [[ "$old_bmu_dnsmasq_version" != "$BMU_DNSMASQ_VERSION" ]]; then
      iptables -t nat -I WISPRO_PREROUTING -p udp --dport 53 -j DNAT --to 8.8.8.8
      stop_dnsmasq
      docker container rm dnsmasq
      start_dnsmasq
      sleep 3
      iptables -t nat -D WISPRO_PREROUTING -p udp --dport 53 -j DNAT --to 8.8.8.8
    fi
    if container_exists freeradius;then
      old_bmu_freeradius_version=$(docker inspect --format='{{.Config.Image}}' freeradius | awk -F: '{print $2}')
      if [[ "$old_bmu_freeradius_version" != "$FREERADIUS_VERSION" ]];then
        if is_running freeradius; then
          freeradius_is_running=true
        else
          freeradius_is_running=false
        fi
        if $freeradius_is_running;then
          stop_freeradius
        fi
        docker container rm freeradius
        if $freeradius_is_running;then
          start_freeradius
        fi
      fi
    fi
    old_redis_version=$(docker inspect --format='{{.Config.Image}}' $REDIS  | awk -F: '{print $2}')
    if [[ "$old_redis_version" != "$REDIS_VERSION" ]]; then
      stop_redis

      docker container rm $REDIS

      start_redis
    fi
    old_bmu_nginx_version=$(docker inspect --format='{{.Config.Image}}' $NGINX  | awk -F: '{print $2}')
    if [[ "$old_bmu_nginx_version" != "$BMU_NGINX_VERSION" ]]; then
      stop_nginx

      docker container rm $NGINX

      start_nginx
    fi
    old_bmu_dhcp_version=$(docker inspect --format='{{.Config.Image}}' $DHCP | awk -F: '{print $2}')
    if [[ "$old_bmu_dhcp_version" != "$BMU_DHCP_VERSION" ]]; then
        stop_dhcp

        docker container rm $DHCP

        start_dhcp
    fi
    old_bmu_pptpd_version=$(docker inspect --format='{{.Config.Image}}' $PPTPD | awk -F: '{print $2}')
    if [[ "$old_bmu_pptpd_version" != "$BMU_PPTPD_VERSION" ]]; then
        stop_pptpd

        docker container rm $PPTPD

        start_pptpd
    fi
    old_bmu_tftp_version=$(docker inspect --format='{{.Config.Image}}' $TFTP | awk -F: '{print $2}')
    if [[ "$old_bmu_tftp_version" != "$BMU_TFTP_VERSION" ]]; then
        stop_tftp

        docker container rm $TFTP

        start_xinetd
    fi
    old_bmu_xinetd_version=$(docker inspect --format='{{.Config.Image}}' $XINETD | awk -F: '{print $2}')
    if [[ "$old_bmu_xinetd_version" != "$BMU_XINETD_VERSION" ]]; then
        stop_xinetd

        docker container rm $XINETD

        start_xinetd
    fi
  }
  wait_for_http_up(){
    timeout=${1:-60} # default is 60s

    for i in `seq $timeout` ; do
      status_code=$(curl -o /dev/null -s -w "%{http_code}" localhost:80)
      if [[ $status_code = 200 || $status_code = 302 ]]; then
        return 0
      fi
      echo "Waiting $i/$timeout HTTP_STATUS: $status_code"
      sleep 1
    done
    return 1
  }

  new_version=$2
  if [[ "${new_version}" != $FOR_BMU_VERSION ]];then
    download_new_wispro
  fi
  # usamos xargs al final para hacer un simil chomp
  api_token=$(docker exec -t wispro-server /bin/bash -c "rails runner 'puts ServerConfiguration.first.api_token'" | head -n1 | tr -d '\r')
  if docker pull wispro/bmu:${new_version} && \
     docker pull wispro/bmu_nginx:${BMU_NGINX_VERSION} && \
     docker pull wispro/bmu_freeradius:${FREERADIUS_VERSION} && \
     docker pull wispro/bmu_dnsmasq:${BMU_DNSMASQ_VERSION} && \
     docker pull wispro/bmu_dhcp:${BMU_DHCP_VERSION} && \
     docker pull wispro/bmu_pptpd:${BMU_PPTPD_VERSION} && \
     docker pull wispro/bmu_postgresql:${BMU_POSTGRESQL_VERSION} && \
     docker pull wispro/bmu_tftp:${BMU_TFTP_VERSION} && \
     docker pull wispro/bmu_xinetd:${BMU_XINETD_VERSION} && \
     docker pull wispro/bmu_redis:${REDIS_VERSION} ; then

    old_version=$(docker inspect --format='{{.Config.Image}}' wispro-server | awk -F: '{print $2}')
    apply_patches "patches_pre"

    sleep 3 #give time to save bmu_update

    stop server
    stop daemon
    backup_container wispro-server
    backup_container wispro-daemon

    VERSION=$new_version
    # run migrations
    if docker run --network host ${VOLUMES} --name migrations --rm wispro/bmu:${VERSION} /bin/bash -c "cd /usr/src/app && rails db:migrate"; then
      start server
      start daemon
      echo "Checking wispro server HTTP"
      wait_for_http_up
      wait_for_result=$?
      if [[ $wait_for_result -eq 0 ]]; then
        if is_running wispro-server && is_running wispro-daemon && daemons_are_running; then
          apply_patches "patches_post"
          upgrade_containers
          exit 0
        fi
      fi
    fi
    restore_old_version
    do_exit
  else
    do_exit
  fi
  ;;
console)
  docker exec -it --env COLUMNS=$COLUMNS --env LINES=$LINES wispro-server /bin/bash -c "rails c"
  ;;
log)
  tail -n500 -F /usr/src/app/log/application.log
  ;;
logs)
  if [[ -n "${2}" ]];then
    file=$(docker inspect --format='{{.LogPath}}' $2)
    tail -f "${file}"
  else
    echo "I need container name"
  fi
  ;;
full_logs)
  if [[ -n "${2}" ]];then
    file=$(docker inspect --format='{{.LogPath}}' $2)
    less "${file}"
  else
    echo "I need container name"
  fi
  ;;
apply)
  docker exec -it --env COLUMNS=$COLUMNS --env LINES=$LINES wispro-server /bin/bash -c "rails runner 'ApplyChanges.new.boot'"
  ;;
bash-server)
  docker exec -it --env COLUMNS=$COLUMNS --env LINES=$LINES wispro-server /bin/bash
  ;;
bash-daemon)
  docker exec -it --env COLUMNS=$COLUMNS --env LINES=$LINES wispro-daemon /bin/bash
  ;;
reset)
  echo "Deleting Server/Daemon containers, are you sure?"
  echo "(Pres Ctrl-c to cancel/Enter to continue)"
  read dummy
  VERSION=$(docker inspect --format='{{.Config.Image}}' wispro-server | awk -F: '{print $2}')
  stop server
  stop daemon
  docker container prune -f
  start server
  start daemon
  ;;
top)
  echo
  echo "Wispro Server"
  docker top wispro-server
  echo
  echo "Wispro Daemon"
  docker top wispro-daemon
  echo
  echo "Wispro Nginx"
  docker top nginx
  ;;
# Con esto verifco que este todo ok después de bajar el archivo
version)
  echo $FOR_BMU_VERSION
  ;;
runner)
  random_name=$(date +%s | sha256sum | head -c 32)
  runner_opts="${VOLUMES} --name $random_name wispro/bmu:$FOR_BMU_VERSION"

  echo $runner_opts
  docker run $runner_opts ${@:2}
  exit_code=$?

  sleep 1
  docker rm -f $random_name

  exit $exit_code
  ;;
*)
  echo "error - wrong arguments"
  ;;
esac
