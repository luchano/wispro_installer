#!/bin/bash
# Wispro Bandwidth Management Unit
WISPRO_URL="https://www.cloud.wispro.co"
FOR_BMU_VERSION="0.1.7"
VOLUMES_PATH=/usr/src/app
DAEMONS_TO_CHECK_AFTER_UPGRADE="bmud bmud_daemon_check_link bmud_daemon_cloud_consumer bmud_daemon_cloud_sync bmud_daemon_contract_notifications"
WISPRO_SCRIPT_FILE=${BASH_SOURCE}
LOG_PATH=/usr/src/app/log

# Docker host dirs as volumes
VOLUMES="-v ${VOLUMES_PATH}/tmp:/usr/src/app/tmp"
VOLUMES="${VOLUMES} -v ${VOLUMES_PATH}/log:/usr/src/app/log"
VOLUMES="${VOLUMES} -v ${VOLUMES_PATH}/public/assets:/usr/src/app/public/assets"  # public assets
VOLUMES="${VOLUMES} -v ${VOLUMES_PATH}/data:/usr/src/app/data"
VOLUMES="${VOLUMES} -v ${VOLUMES_PATH}/etc:/usr/src/app/etc"
VOLUMES="${VOLUMES} -v ${VOLUMES_PATH}/scripts:/usr/src/app/scripts"
VOLUMES="${VOLUMES} -v /etc/dhcp:/etc/dhcp"
VOLUMES="${VOLUMES} -v /etc/dhcp:/etc/ppp"

NGINX=nginx

# NGINX shared dirs
NGINX_VOLUMES="-v ${LOG_PATH}/nginx:/var/log/nginx" # Logs
NGINX_VOLUMES="$NGINX_VOLUMES -v ${VOLUMES_PATH}/public/assets:/app/public/assets"  # public assets

run_nginx() {
  if container_exists $NGINX; then
    docker start $NGINX
  else
    local extra_params="--log-opt max-size=1m --log-opt max-file=3 --restart=unless-stopped"
    extra_params="$extra_params -d --name $NGINX -h $NGINX --link wispro-server -p 80:80 -p 443:443 $NGINX_VOLUMES"

    docker run $extra_params wispro/bmu_nginx:latest
  fi
}

stop_nginx() {
  docker stop $NGINX
}

start_nginx() {
  if is_running $NGINX; then
    stop_nginx
  fi

  run_nginx
}

is_running(){
  local name=$1
  if docker top $name &>/dev/null; then
    return 0
  else
    return 1
  fi
}
container_exists(){
  local name=$1
  if [[ $(docker ps -a -f "name=$name\$" --format '{{.Names}}') == $name ]]; then
    return 0
  else
    return 1
  fi
}
daemon_is_running (){
  local daemon=$1
  for daemon_running in $daemons_running; do
    [[ $daemon_to_check == $daemon_running ]] && return 0
  done
  return 1
}
daemons_are_running(){
  local found=0
  daemons_running=$(docker top wispro-daemon | grep ruby | awk '{print $5}')
  for daemon_to_check in $DAEMONS_TO_CHECK_AFTER_UPGRADE; do
    daemon_is_running daemon_to_check || return 1
  done
  return 0
}

stop(){
  local name=wispro-${1}
  #if is_running $name; then
    docker stop $name
    if [[ "${1}" == "server" ]]; then
      stop_nginx
    fi
  #fi
}
start(){
  local name=$1 extra_args="" rsync_with_developer_file=/usr/src/app/tmp/.rsync_with_developer
  if [[ "${BASH_ARGV[0]}" == "sync" ]]; then
    touch $rsync_with_developer_file
  else
    [[ -r $rsync_with_developer_file ]] && rm -f $rsync_with_developer_file
  fi

  full_name=wispro-${name}
  if ! is_running $full_name; then
    if container_exists $full_name; then
      opts="start $full_name"
    else
      if [[ -z "${VERSION}" ]]; then
        echo "VERSION= is unset, please run: "
        echo "# VERSION=version_number wispro start"
        exit 1
      else
        echo "Initializing new docker container with version wispro/bmu:${VERSION}"
        opts="run --log-opt max-size=1m --log-opt max-file=3 --restart=unless-stopped -d ${extra_args} ${VOLUMES} --name $full_name -h $full_name wispro/bmu:${VERSION} /usr/src/app/bin/docker-cmd-$name.sh"
      fi
    fi
    docker $opts

    if [[ $full_name == "wispro-server" ]]; then
      start_nginx
    fi

    return $?
    #echo $(docker inspect -f '{{ .State.Pid }}' $name) > $WISPRO_SERVER_PIDFILE
  fi
}
case $1 in
check)
  ;;
start)
  if [[ -n "${2}" ]];then
    start ${2}
  else
    start server
    start daemon
  fi
  ;;
stop)
  if [[ -n "${2}" ]];then
    stop ${2}
  else
    stop server
    stop daemon
  fi
  ;;
restart)
  if [[ -n "${2}" ]];then
    stop ${2}
    start ${2}
  else
    stop server
    stop daemon
    start server
    start daemon
  fi
  ;;
upgrade)
  #TODO trap
  do_exit(){
    if [[ "$1" == "restore_old_version" ]]; then
      restore_old_version
    fi
    echo "Upgrade to version ${new_version} failed."
    exit 1
  }
  restore_old_version(){
    VERSION=$old_version
    stop server
    stop daemon
    if container_exists wispro-server; then
      docker container rm wispro-server
    fi
    docker container rename wispro-server-bak wispro-server
    if container_exists wispro-daemon; then
      docker container rm wispro-daemon
    fi
    docker container rename wispro-daemon-bak wispro-daemon
    cp $db_path.bak ${db_path}
    start server
    start daemon
  }
  apply_patches(){
    action=$1
    restore=$2
    patch_file=$(mktemp)
    status_code=$(curl -w "%{http_code}" -o $patch_file "${WISPRO_URL}/bmu_versions/${action}?api_token=${api_token}&from=${old_version}&to=${new_version}")
    if [[ "$status_code" == "200" ]]; then
      if [[ "$(/bin/bash $patch_file TEST)" == "OK" ]];then
        cat $patch_file
        if ! /bin/bash $patch_file; then
          do_exit $restore
        fi
      else
        do_exit $restore
      fi
    else
      do_exit $restore
    fi
  }
  download_new_wispro(){
    tmp_script=$(mktemp)
    http_code=$(curl -w '%{http_code}' -L "https://github.com/sequre/wispro_installer/raw/${new_version}/wispro" -o $tmp_script)
    if [[ $? -eq 0 && "${http_code}" = "200" && "$(/bin/bash ${tmp_script} version)" = "${new_version}" ]] && \
      #cp ${WISPRO_SCRIPT_FILE} ${WISPRO_SCRIPT_FILE}.bak && \
      chmod 755 ${tmp_script} && \
      cp $tmp_script ${WISPRO_SCRIPT_FILE}; then
      [ -d ${LOG_PATH} ] || mkdir -p $LOG_PATH
      # Empezamos de nuevo con el upgrade, pero ya tenemos la nueva versión de wispro (el script)
      # que acaba de pisar este mismo script que estamos ejecutando, por eso hacemos exec
      # para asegurarnos de salir del current script y ejectuar el que acabamos de bajar
      exec ${WISPRO_SCRIPT_FILE} upgrade ${new_version}  &>${LOG_PATH}/wispro_upgrade_to_${new_version}
      echo "If you read this message then something had gone seriously WRONG"
    else
      echo "Unable to download and test wispro script with tag: ${new_version}"
    fi
    do_exit
  }
  set -x
  new_version=$2
  if [[ "${new_version}" != $FOR_BMU_VERSION ]];then
    download_new_wispro
  fi
  # usamos xargs al final para hacer un simil chomp
  api_token=$(docker exec -t wispro-server /bin/bash -c "rails runner 'puts ServerConfiguration.first.api_token'" | tail -n1 | xargs)
  if docker pull wispro/bmu:${new_version}; then
    db_path=${VOLUMES_PATH}/data/wispro_bmu_production.sqlite3
    #TODO reemplazar bak por el nro de version o algo así para poder volver
    cp $db_path ${db_path}.bak
    old_version=$(docker inspect --format='{{.Config.Image}}' wispro-server | awk -F: '{print $2}')
    apply_patches "patches_pre"
    sleep 3 #give time to save bmu_update
    stop server
    stop daemon

    if container_exists $NGINX; then
      docker container rm $NGINX
    fi

    if container_exists wispro-server; then
      if container_exists wispro-server-bak; then
        docker container rm wispro-server-bak
      fi
      docker container rename wispro-server wispro-server-bak
    fi
    if container_exists wispro-daemon; then
      if container_exists wispro-daemon-bak; then
        docker container rm wispro-daemon-bak
      fi
      docker container rename wispro-daemon wispro-daemon-bak
    fi
    VERSION=$new_version
    start server
    start daemon
    sleep 30
    if is_running wispro-server && is_running wispro-daemon && daemons_are_running; then
      # Check server container with for example an its_alive via http
      apply_patches "patches_post" "restore_old_version"
      exit 0
    else
      restore_old_version
      do_exit
    fi
  else
    do_exit
  fi
  ;;
console)
  docker exec -it wispro-server /bin/bash -c "rails c"
  ;;
log)
  tail -n500 -F /usr/src/app/log/application.log
  ;;
apply)
  docker exec -it wispro-server /bin/bash -c "rails runner 'ApplyChanges.new.boot'"
  ;;
bash-server)
  docker exec -it wispro-server /bin/bash
  ;;
bash-daemon)
  docker exec -it wispro-daemon /bin/bash
  ;;
reset)
  echo "Deleting all containers and Wispro database, are you sure?"
  echo "(Pres Ctrl-c to cancel/Enter to continue)"
  read dummy
  VERSION=$(docker inspect --format='{{.Config.Image}}' wispro-server | awk -F: '{print $2}')
  stop server
  stop daemon
  docker container prune -f
  start server
  start daemon
  #rm -f /usr/src/app/data/wispro_bmu_production.sqlite3
  ;;
top)
  echo
  echo "Wispro Server"
  docker top wispro-server
  echo
  echo "Wispro Daemon"
  docker top wispro-daemon
  ;;
# Con esto verifco que este todo ok después de bajar el archivo
version)
  echo $FOR_BMU_VERSION
  ;;
*)
  echo "error - wrong arguments"
  ;;
esac
